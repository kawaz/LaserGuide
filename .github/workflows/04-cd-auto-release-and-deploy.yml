name: CD - Auto Release and Deploy

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  check-and-release:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Check for code changes
        id: check_changes
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Check if there are any code changes since the last tag
          CODE_CHANGES=$(git diff --name-only $LATEST_TAG..HEAD | grep -E '\.(swift|m|mm|h|cpp|c|xcodeproj|plist|entitlements)$' || true)
          
          if [ -z "$CODE_CHANGES" ]; then
            echo "No code changes found since $LATEST_TAG"
            echo "skip_release=true" >> "$GITHUB_OUTPUT"
          else
            echo "Code changes found:"
            echo "$CODE_CHANGES"
            echo "skip_release=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Determine version bump
        if: steps.check_changes.outputs.skip_release != 'true'
        id: version_bump
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          
          # Get commit messages since last tag
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            COMMITS=$(git log --pretty=format:"%s" --reverse)
          else
            COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"%s")
          fi
          
          # Check for breaking changes or features
          BUMP_TYPE="patch"
          
          # Check commit messages for conventional commits
          while IFS= read -r commit; do
            if [[ "$commit" =~ ^(feat|feature): ]] || [[ "$commit" =~ BREAKING[\s-]CHANGE ]]; then
              BUMP_TYPE="minor"
              break
            fi
          done <<< "$COMMITS"
          
          echo "Bump type: $BUMP_TYPE"
          echo "bump_type=$BUMP_TYPE" >> "$GITHUB_OUTPUT"
          
          # Calculate new version
          CURRENT_VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          if [ "$BUMP_TYPE" = "minor" ]; then
            NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
          else
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          fi
          
          echo "New version: v$NEW_VERSION"
          echo "new_version=v$NEW_VERSION" >> "$GITHUB_OUTPUT"
          echo "version_number=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      - name: Create tag
        if: steps.check_changes.outputs.skip_release != 'true'
        run: |
          NEW_VERSION="${{ steps.version_bump.outputs.new_version }}"
          
          # Create tag locally
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$NEW_VERSION" -m "Auto-release $NEW_VERSION"
          
          echo "âœ… Created tag $NEW_VERSION"

      - name: Generate Release Notes
        if: steps.check_changes.outputs.skip_release != 'true'
        id: changelog
        run: |
          # Get the previous tag
          NEW_VERSION="${{ steps.version_bump.outputs.new_version }}"
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            # First release
            COMMITS=$(git log --pretty=format:"- %s" --reverse | grep -v "^Update Formula to v")
          else
            # Changes since previous tag (exclude Formula update commits)
            COMMITS=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s" | grep -v "^Update Formula to v")
          fi
          
          # Create release notes
          echo "## What's Changed" > release_notes.md
          echo "" >> release_notes.md
          echo "$COMMITS" >> release_notes.md
          
          # Add GitHub changelog URL
          echo "" >> release_notes.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${NEW_VERSION}" >> release_notes.md

      - name: Set up Xcode
        if: steps.check_changes.outputs.skip_release != 'true'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Build Universal Binary
        if: steps.check_changes.outputs.skip_release != 'true'
        run: |
          xcodebuild -scheme LaserGuide \
            -configuration Release \
            -derivedDataPath ./build \
            -destination 'generic/platform=macOS' \
            -archivePath ./build/LaserGuide.xcarchive \
            archive \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO

      - name: Create ZIP
        if: steps.check_changes.outputs.skip_release != 'true'
        run: |
          VERSION="${{ steps.version_bump.outputs.version_number }}"
          ZIP_NAME="LaserGuide-${VERSION}.zip"
          
          cd build/LaserGuide.xcarchive/Products/Applications
          zip -r ../../../"${ZIP_NAME}" LaserGuide.app
          cd -
          mv build/"${ZIP_NAME}" .
          
          echo "ZIP_NAME=${ZIP_NAME}" >> "$GITHUB_ENV"

      - name: Push tag
        if: steps.check_changes.outputs.skip_release != 'true'
        run: |
          NEW_VERSION="${{ steps.version_bump.outputs.new_version }}"
          git push origin "$NEW_VERSION"

      - name: Create Release with Asset
        if: steps.check_changes.outputs.skip_release != 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version_bump.outputs.new_version }}
          body_path: release_notes.md
          files: ${{ env.ZIP_NAME }}
          generate_release_notes: false
          draft: false
          prerelease: false

      - name: Update Formula
        if: steps.check_changes.outputs.skip_release != 'true'
        run: |
          # Get version and SHA256
          VERSION="${{ steps.version_bump.outputs.version_number }}"
          SHA256=$(shasum -a 256 "${ZIP_NAME}" | awk '{print $1}')
          
          # Switch to main branch
          git fetch origin main
          git checkout main
          git pull origin main
          
          # Update Formula
          sed -i '' \
            -e "s|download/v[0-9.]*/LaserGuide-[0-9.]*\.zip|download/v${VERSION}/LaserGuide-${VERSION}.zip|" \
            -e "s|sha256 \"[a-f0-9]*\"|sha256 \"${SHA256}\"|" \
            Formula/laserguide.rb
          
          # Commit and push changes
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add Formula/laserguide.rb
          git commit -m "Update Formula to v${VERSION}"
          git push origin main