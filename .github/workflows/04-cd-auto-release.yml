name: CD - Auto Release on Merge

# Note: Tags created by this workflow do not trigger other workflows due to GitHub Actions security.
# To work around this, either:
# 1. Use a Personal Access Token (PAT) instead of GITHUB_TOKEN
# 2. Manually push the tag after it's created
# Currently, the release workflow (03-cd-release.yml) must be triggered manually or by pushing tags from outside Actions.

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  check-and-release:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Check for code changes
        id: check_changes
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Check if there are any code changes since the last tag
          CODE_CHANGES=$(git diff --name-only $LATEST_TAG..HEAD | grep -E '\.(swift|m|mm|h|cpp|c|xcodeproj|plist|entitlements)$' || true)
          
          if [ -z "$CODE_CHANGES" ]; then
            echo "No code changes found since $LATEST_TAG"
            echo "skip_release=true" >> "$GITHUB_OUTPUT"
          else
            echo "Code changes found:"
            echo "$CODE_CHANGES"
            echo "skip_release=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Determine version bump
        if: steps.check_changes.outputs.skip_release != 'true'
        id: version_bump
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          
          # Get commit messages since last tag
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            COMMITS=$(git log --pretty=format:"%s" --reverse)
          else
            COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"%s")
          fi
          
          # Check for breaking changes or features
          BUMP_TYPE="patch"
          
          # Check commit messages for conventional commits
          while IFS= read -r commit; do
            if [[ "$commit" =~ ^(feat|feature): ]] || [[ "$commit" =~ BREAKING[\s-]CHANGE ]]; then
              BUMP_TYPE="minor"
              break
            fi
          done <<< "$COMMITS"
          
          echo "Bump type: $BUMP_TYPE"
          echo "bump_type=$BUMP_TYPE" >> "$GITHUB_OUTPUT"
          
          # Calculate new version
          CURRENT_VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          if [ "$BUMP_TYPE" = "minor" ]; then
            NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
          else
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          fi
          
          echo "New version: v$NEW_VERSION"
          echo "new_version=v$NEW_VERSION" >> "$GITHUB_OUTPUT"

      - name: Create and push tag
        if: steps.check_changes.outputs.skip_release != 'true'
        run: |
          NEW_VERSION="${{ steps.version_bump.outputs.new_version }}"
          
          # Create tag
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$NEW_VERSION" -m "Auto-release $NEW_VERSION"
          git push origin "$NEW_VERSION"
          
          echo "âœ… Created and pushed tag $NEW_VERSION"
          echo "The release workflow will now be triggered automatically."